plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}


processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand rootProject.ext.replaceProperties + [project: project]
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge"
    atAccessWideners.add("${rootProject.mod_id}.accesswidener") // this is a path inside the mod jar
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    archiveClassifier = "neoforge-sources"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {neoForge "net.neoforged:neoforge:${neo_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')


    implementation 'org.jetbrains:annotations:22.0.0'


//!! MOONLIGHT LIB (REQUIRED)  -------------------------------------------------------------------------------------- \\
    String path = System.getenv('REPOS21_1')
    boolean usesMavenLocalML =  System.getenv().MY_PC == "1"
    print "isMyPc: $usesMavenLocalML"

    //- Repository LOCAL
    if (enable_moonlight_test.toBoolean()) {
        if (usesMavenLocalML) {
            //- ~/forge/mods LOCAL
            modImplementation("net.mehvahdjukaar:moonlight-neoforge:${project.moonlight_testVersion}") // LOCAL
        } else {
            modImplementation(files(path + "\\Moonlight\\neoforge\\build\\libs\\moonlight-${moonlight_testVersion}-neoforge.jar"))
        }
    } else {
        //+ MAVEN
        modImplementation("maven.modrinth:moonlight:${moonlight_mavenVersion}-neoforge") // v2.18.13
    }

//!! EVERY COMPAT (REQUIRED) ---------------------------------------------------------------------------------------- \\
    if (enable_everycomp_test.toBoolean()) {
        //- Repository LOCAL
        modImplementation(files(path + "\\WoodGood\\neoforge\\build\\libs\\everycomp-${everycomp_testVersion}-neoforge.jar"))
    } else {
        //+ MAVEN
        modImplementation("maven.modrinth:every-compat:${everycomp_mavenVersion}-neoforge") // v2.10.1
    }

//!! TOOLS ---------------------------------------------------------------------------------------------------------- \\
    modRuntimeOnly("curse.maven:jei-238222:5846880")
//    modRuntimeOnly("curse.maven:worldedit-225608:5830452")
    modRuntimeOnly("curse.maven:jade-324717:5884231") // v15.8.3
    modRuntimeOnly("curse.maven:emi-580555:5872513") // v1.1.18
    modRuntimeOnly("curse.maven:crafttweaker-239197:6434161")
    modRuntimeOnly("curse.maven:configured-457570:5873783")

//!! ================================================= DEPENDENCIES ================================================= \\
    //- ONLY FOR TESTING - can be commented out or enabled
    modRuntimeOnly("curse.maven:terrablender-neoforge-940057:6054947") // v4.1.0.8 |
//    modRuntimeOnly("curse.maven:citadel-331936:6002521") // v2.6.1 | Alexs-Caves //!! 1.20
//    modRuntimeOnly("curse.maven:yungs-api-421850:5769971") // v4.0.6 | Better-Archeology //!! 1.20
//    modRuntimeOnly("curse.maven:patchouli-306770:4966125") // v84 | TFC //!! 1.20
//    modRuntimeOnly("curse.maven:puzzles-lib-495476:6494827") // v21.1.36 | Stoneworks
//    modRuntimeOnly("curse.maven:zeta-968868:5597406") // v1.0.24 | Quark //!! 1.20
//    modRuntimeOnly("curse.maven:athena-841890:5176879") // v3.1.2 | Chipped //!! 1.20
//    modRuntimeOnly("curse.maven:resourceful-lib-570073:5659871") // v2.1.29 | Chipped //!! 1.20
//    modRuntimeOnly("curse.maven:fusion-connected-textures-854949:5129294") // v1.1.1 | Rechiseled //!! 1.20
//    modRuntimeOnly("curse.maven:supermartijn642s-config-lib-438332:4715408") // v1.1.8 | Rechiseled, Better-Archeology //!! 1.20
//    modRuntimeOnly("curse.maven:mantle-74924:6041712") // v1.11.28 | Tinkers-Construct //!! 1.20
//    modRuntimeOnly("curse.maven:blueprint-382216:5292242") // v7.1.0 | The-Outer-End, Caverns-And-Chasms //!! 1.20
//    modRuntimeOnly("curse.maven:monolib-968432:6123976") // v2.0.0 | More-Beautiful-Torches //!! 1.20

    //- ~/forge/mods LOCAL

    //- OTHER MAVENs - can be commented out or enabled
//    forgeRuntimeLibrary("com.teamresourceful:bytecodecs:1.0.2") // Chipped
//    modRuntimeOnly("dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_neoforge_version}") // Create
//    modRuntimeOnly("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}") // Create

    //+ REQUIRED - The modules access libaries from below - Only in FORGE
    modCompileOnly("curse.maven:supermartijn642s-core-lib-454372:6076757") // v1.1.18a | Rechiseled

        //+ OTHER MAVENS
    modCompileOnly("com.tterrag.registrate:Registrate:${registrate_version}") // Create

//!! =================================================== IMPORTS ==================================================== \\
    //- ONLY FOR TESTING - can be commented out or enabled
//    modRuntimeOnly("curse.maven:better-archeology-835687:5693368") // supermartijn642s' Config-Lib, Yung's API //!! 1.20
//    modRuntimeOnly("curse.maven:twigs-496913:4605097") //!! 1.20
//    modRuntimeOnly("curse.maven:stoneworks-852663:5731747") // puzzles-lib
//    modRuntimeOnly("curse.maven:building-but-better-989479:5362380") // v1.0.1 //!! 1.20
//    modRuntimeOnly("curse.maven:quark-243121:5594847") // Zeta //!! 1.20
//    modRuntimeOnly("curse.maven:more-beautiful-torches-860325:5263631") // Monolib //!! 1.20

        //- OTHER MAVENS
//    modRuntimeOnly("earth.terrarium.chipped:chipped-neoforge-${minecraft_version}:4.0.2") //INCLUDED: Athena, Resourceful-Lib, REQUIRE: Bytecodecs

    //+ REQUIRED - The modules access libaries from below - ONLY IN FORGE
        // MACAW's
    modCompileOnly("curse.maven:macaws-bridges-351725:5465228") //v3.0.0
    modCompileOnly("curse.maven:macaws-paths-and-pavings-629153:5430735") //v1.0.5
    modCompileOnly("curse.maven:macaws-windows-363569:5592081") //v2.3.0
    modCompileOnly("curse.maven:macaws-roofs-352039:5554896") //v2.3.1
    modCompileOnly("curse.maven:macaws-fences-and-walls-453925:5442175") //v1.1.2
    modCompileOnly("curse.maven:macaws-stairs-1119394:5802422") //v1.0.1

        //+ GENERAL
    modCompileOnly("curse.maven:additional-lights-384991:5504182")
    modCompileOnly("curse.maven:rechiseled-558998:5663514") // Fusion, supermartijn642s-[ Config-Lib, Core-Lib ]
    modCompileOnly("curse.maven:stone-chest-307052:5931165")

        // OTHER MAVENS
    modCompileOnly("com.simibubi.create:create-1.21.1:${create_version}:slim") { transitive = false } // Registrate, Flywheel, Ponder

//!! ================================================= FOR TESTING ================================================== \\

    // STONETYPE ONLY
//    modRuntimeOnly("curse.maven:alexs-caves-924854:5848216") // Citadel //!! 1.20
//    modRuntimeOnly("curse.maven:strata-forge-edition-387296:4989643") //!! 1.20
//    modRuntimeOnly("curse.maven:spelunkery-790530:5727135") // Moonlight-Lib //!! 1.20
//    modRuntimeOnly("curse.maven:tinkers-construct-74072:6041763") // Mantle //!! 1.20
    modRuntimeOnly("curse.maven:thaumon-926511:5492714")
//    modRuntimeOnly("curse.maven:gaia-dimension-302529:5773438")
//    modRuntimeOnly("curse.maven:what-is-stone-colorful-caves-853161:5175855") //!! 1.20
//    modRuntimeOnly("curse.maven:artsandcrafts-1034791:5992027") //!! 1.20
//    modRuntimeOnly("curse.maven:the-outer-end-430404:5812948") // Blueprint //!! 1.20
//    modRuntimeOnly("curse.maven:caverns-and-chasms-438005:6040957") // Blueprint //!! 1.20

    // MUDTYPE ONLY
    modRuntimeOnly("curse.maven:deeperdarker-659011:5908863")

    // STONETYPE & WOODTYPE
//    modRuntimeOnly("curse.maven:terrafirmacraft-302973:5943050") // patchouli //!! 1.20

}

tasks.withType(JavaCompile).configureEach {
    it.options.compilerArgs.add("-Acrafttweaker.processor.document.output_directory=${new File(rootProject.buildDir, "docsOut")}")
    it.options.compilerArgs.add("-Acrafttweaker.processor.document.multi_source=true")

    it.options.compilerArgs << "-Xmaxerrs" << "4000"

}